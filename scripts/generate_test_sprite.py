#!/usr/bin/env python3
"""
Generate a simple test sprite for Chaotic Pet
Creates a cute blob character with breathing animation (3 frames)
Uses Sweetie 16 color palette
"""

from PIL import Image, ImageDraw
import json
import os

# Sweetie 16 Palette (from style guide)
PALETTE = {
    'black': (26, 28, 44),        # #1a1c2c - outline
    'dark_purple': (93, 39, 93),  # #5d275d - shadow
    'dark_red': (177, 62, 83),    # #b13e53 - shadow/blush
    'orange': (239, 125, 87),     # #ef7d57 - body
    'yellow': (255, 205, 117),    # #ffcd75 - body/highlight
    'light_green': (167, 240, 112), # #a7f070 - happy accent
    'white': (244, 244, 244),     # #f4f4f4 - eyes/highlights
    'light_gray': (148, 176, 194), # #94b0c2 - neutral
}

def create_idle_frame(frame_num, total_frames=3):
    """Create one frame of idle animation (breathing effect)"""

    # Create 64x64 transparent image
    img = Image.new('RGBA', (64, 64), (0, 0, 0, 0))
    draw = ImageDraw.Draw(img)

    # Breathing animation - slight size variation
    # Frame 0: normal, Frame 1: expanded, Frame 2: back to normal
    expansion = 0
    if frame_num == 1:
        expansion = 2  # expand by 2 pixels

    # Body center
    center_x, center_y = 32, 34

    # Draw body (rounded blob shape)
    # Base body size
    body_radius = 16 + expansion

    # Body fill (yellow/orange)
    body_color = PALETTE['yellow']

    # Draw ellipse body
    body_bbox = [
        center_x - body_radius,
        center_y - body_radius - 2,
        center_x + body_radius,
        center_y + body_radius + 2
    ]

    # Shadow (darker color at bottom)
    shadow_bbox = [
        body_bbox[0] + 2,
        body_bbox[1] + body_radius,
        body_bbox[2] - 2,
        body_bbox[3]
    ]
    draw.ellipse(shadow_bbox, fill=PALETTE['dark_red'])

    # Main body
    draw.ellipse(body_bbox, fill=body_color)

    # Outline (black)
    draw.ellipse(body_bbox, outline=PALETTE['black'], width=2)

    # Eyes (slightly above center)
    eye_y = center_y - 4
    left_eye_x = center_x - 8
    right_eye_x = center_x + 8
    eye_size = 4

    # Left eye
    draw.ellipse([
        left_eye_x - eye_size//2,
        eye_y - eye_size//2,
        left_eye_x + eye_size//2,
        eye_y + eye_size//2
    ], fill=PALETTE['black'])

    # Left eye highlight
    draw.rectangle([
        left_eye_x - 1,
        eye_y - 1,
        left_eye_x,
        eye_y
    ], fill=PALETTE['white'])

    # Right eye
    draw.ellipse([
        right_eye_x - eye_size//2,
        eye_y - eye_size//2,
        right_eye_x + eye_size//2,
        eye_y + eye_size//2
    ], fill=PALETTE['black'])

    # Right eye highlight
    draw.rectangle([
        right_eye_x - 1,
        eye_y - 1,
        right_eye_x,
        eye_y
    ], fill=PALETTE['white'])

    # Mouth (simple curve)
    mouth_y = center_y + 4
    mouth_points = [
        (center_x - 6, mouth_y),
        (center_x - 3, mouth_y + 2),
        (center_x, mouth_y + 3),
        (center_x + 3, mouth_y + 2),
        (center_x + 6, mouth_y),
    ]
    draw.line(mouth_points, fill=PALETTE['black'], width=2)

    # Blush (optional, cute touch)
    blush_y = center_y + 2
    blush_size = 3

    # Left blush
    draw.ellipse([
        left_eye_x - blush_size,
        blush_y - blush_size//2,
        left_eye_x - blush_size + 4,
        blush_y + blush_size//2
    ], fill=PALETTE['dark_red'] + (128,))  # Semi-transparent

    # Right blush
    draw.ellipse([
        right_eye_x - blush_size + 2,
        blush_y - blush_size//2,
        right_eye_x + blush_size + 2,
        blush_y + blush_size//2
    ], fill=PALETTE['dark_red'] + (128,))  # Semi-transparent

    return img

def create_sprite_sheet():
    """Create sprite sheet with 3 frames of idle animation"""

    frames = []
    for i in range(3):
        frame = create_idle_frame(i, 3)
        frames.append(frame)

    # Create sprite sheet (horizontal layout)
    sheet_width = 64 * 3  # 3 frames
    sheet_height = 64
    sprite_sheet = Image.new('RGBA', (sheet_width, sheet_height), (0, 0, 0, 0))

    # Paste frames
    for i, frame in enumerate(frames):
        sprite_sheet.paste(frame, (i * 64, 0))

    return sprite_sheet, frames

def generate_json_metadata():
    """Generate JSON metadata for sprite sheet"""

    metadata = {
        "frames": {
            "frame_0_idle": {
                "frame": {"x": 0, "y": 0, "w": 64, "h": 64},
                "duration": 125
            },
            "frame_1_idle": {
                "frame": {"x": 64, "y": 0, "w": 64, "h": 64},
                "duration": 125
            },
            "frame_2_idle": {
                "frame": {"x": 128, "y": 0, "w": 64, "h": 64},
                "duration": 125
            }
        },
        "meta": {
            "app": "Generated by Python script",
            "version": "1.0",
            "image": "pet_idle.png",
            "format": "RGBA8888",
            "size": {"w": 192, "h": 64},
            "scale": "1",
            "frameTags": [
                {
                    "name": "idle",
                    "from": 0,
                    "to": 2,
                    "direction": "forward"
                }
            ]
        }
    }

    return metadata

def main():
    """Main function to generate sprite files"""

    print("üé® Generating test sprite for Chaotic Pet...")

    # Output directory
    output_dir = "mobile/chaotic-pet/assets/sprites/pets"
    os.makedirs(output_dir, exist_ok=True)

    # Generate sprite sheet
    print("  üìù Creating sprite frames...")
    sprite_sheet, frames = create_sprite_sheet()

    # Save sprite sheet
    sprite_path = os.path.join(output_dir, "pet_idle.png")
    print(f"  üíæ Saving sprite sheet: {sprite_path}")
    sprite_sheet.save(sprite_path, "PNG")

    # Generate and save JSON metadata
    print("  üìÑ Generating JSON metadata...")
    metadata = generate_json_metadata()
    json_path = os.path.join(output_dir, "pet_idle.json")
    print(f"  üíæ Saving metadata: {json_path}")

    with open(json_path, 'w') as f:
        json.dump(metadata, f, indent=2)

    # Verify files
    print("\n‚úÖ Sprite generation complete!")
    print(f"\nüìä Generated files:")
    print(f"  - {sprite_path} ({os.path.getsize(sprite_path)} bytes)")
    print(f"  - {json_path} ({os.path.getsize(json_path)} bytes)")

    # Save individual frames for preview (optional)
    preview_dir = os.path.join(output_dir, "preview")
    os.makedirs(preview_dir, exist_ok=True)
    for i, frame in enumerate(frames):
        frame_path = os.path.join(preview_dir, f"frame_{i}.png")
        frame.save(frame_path, "PNG")
    print(f"  - Preview frames saved to: {preview_dir}/")

    print("\nüéØ Next steps:")
    print("  1. Check the generated sprite: mobile/chaotic-pet/assets/sprites/pets/pet_idle.png")
    print("  2. Uncomment the line in src/components/PetSprite.tsx:")
    print("     idle: require('../../assets/sprites/pets/pet_idle.png'),")
    print("  3. Run the app: cd mobile/chaotic-pet && npm start")
    print("\nüéâ Your pet now has a face!")

if __name__ == "__main__":
    main()
